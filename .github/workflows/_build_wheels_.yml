name: Build wheels

on:
  workflow_call:
  workflow_dispatch:  # Manual trigger

jobs:
  _build-wheels_:
    name: Build wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        # Don't use '*-latest' to ensure the oldest Python version is not
        # dropped on upgrade.
        # Use 'ubuntu-22.04' because 24.04 is not available for 'act' yet.
        # The 'ubuntu-*-arm' runners are not free for open source yet.
        os:
          - 'ubuntu-22.04'
          #- 'ubuntu-22.04-arm'
          - 'windows-2022'
        exclude:
          # The 'ubuntu-*-arm' and 'windows*' runners are not supported by 'act'
          #- os: ${{ github.event.act && 'ubuntu-22.04-arm' }}
          - os: ${{ github.event.act && 'windows-2022' }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.0
        with:
          output-dir: dist
        env:
          CIBW_ARCHS: "auto64"
          CIBW_SKIP: "cp3??t-* *-musllinux_*"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: 'auditwheel repair -w {dest_dir} {wheel} --exclude libpvcam.so.*'
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: ''
          CIBW_ENVIRONMENT_LINUX: "PVCAM_SDK_PATH=$PWD/pvcam-sdk/linux"
          # Windows build doesn't run in container and %CD% doesn't work
          CIBW_ENVIRONMENT_WINDOWS: "PVCAM_SDK_PATH=${GITHUB_WORKSPACE}/pvcam-sdk/windows"
          CIBW_BEFORE_ALL_LINUX: >
            for d in i686 x86_64 aarch64; do
              cd "$PVCAM_SDK_PATH/library/$d" &&
              f=$(echo libpvcam.so.*.*) &&
              chmod +x "$f" &&
              ln -sf "$f" "${f%.*}" &&
              ln -sf "$f" "${f%%.so.*}.so";
            done

      - uses: actions/upload-artifact@v4
        with:
          name: pyvcam_wheel_${{ matrix.os }}-${{ strategy.job-index }}
          path: dist/
          if-no-files-found: error
